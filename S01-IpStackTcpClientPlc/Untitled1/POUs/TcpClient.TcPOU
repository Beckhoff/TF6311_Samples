<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcpClient" Id="{ead07a82-1408-4579-8dce-ebcaeca24a86}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'c++_compatible'}
FUNCTION_BLOCK TcpClient IMPLEMENTS ITcIoTcpProtocolRecv
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	{attribute 'TcInitSymbol'}
    oid: OTCID; 
    ipTcp:       ITcIoTcpProtocol;
    nReceivedPakets: UINT;
	bSend: BOOL := FALSE; ;
	
	//unencoded: sMessage : STRING := 'GET / HTTP/1.1\r\nHOST: beckhoff.com\r\n\r\n'; //is encoding correct?!
	sMessage : STRING := 'GET / HTTP/1.1$r$nHOST: beckhoff.com$r$n$r$n'; //is encoding correct?!
    tcpPort:    UINT := 80;
	tcpServerAdr : IpAdrUnion; 
	nSocketId : UDINT; 
	nSentData: UDINT; 
	hr : HRESULT; 

	//Sample information about communication
	nConnections : UDINT; 
	lastTcpEvent	: TCPIP_EVENT;
	nLastReturnedMessageLength : UDINT; 
	sLastReturnedMessage : STRING; 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF(ipTcp <> 0) THEN 
	ipTcp.CheckReceived(); 
	IF (nSocketId = 0) THEN 
		IF(ipTcp.AllocSocket(THIS^, nSocketId) = S_OK) THEN //! THIS^ might get invalid due to online change! "Reallocate" by nSocketId <>0 ?
			nConnections := nConnections+1;
			IF(ipTcp.Connect(nSocketId, tcpServerAdr.ipadrIPStack, tcpPort) <> S_OK) THEN
				ipTcp.FreeSocket(nSocketId); 
				nSocketId := 0; 
			END_IF
		END_IF
	ELSIF (bSend = TRUE) THEN
		hr := ipTcp.IsConnected(nSocketId); 
 		IF (hr = S_OK) THEN 
			ipTcp.SendData(nSocketId, len(sMessage), ADR(sMessage), nSentData); 
 			bSend := FALSE;
		ELSE 
			ADSLOGDINT(msgCtrlMask := ADSLOG_MSGTYPE_HINT, msgFmtStr := 'Not yet connected socket %ud', dintArg := nSocketId);
	    END_IF
	END_IF
END_IF]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{52d7ab92-29c2-475b-b487-2c215adeb930}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ipTcp <> 0 AND NOT bInCopyCode) THEN // no online change -> shutdown
    ipTcp.FreeSocket(nSocketId);
    FW_SafeRelease(ADR(ipTcp));
	FB_exit := TRUE; 
ELSIF (bInCopyCode) THEN //onlinechange nothing todo 
	FB_exit := TRUE; 
ELSE 
	FB_exit := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{d1247768-b9a8-4686-b16a-eb59144647c7}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
VAR
	ipSrv: ITComObjectServer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN // no online change
	IF ipTcp = 0 THEN
		FW_ObjMgr_GetObjectInstance(	oid:=oid, 
												iid:=TC_GLOBAL_IID_LIST.IID_ITcIoTcpProtocol, 
												pipUnk:=ADR(ipTcp) );
	END_IF
END_IF


//generate adress
tcpServerAdr.ipadr[0] := 162; //beckhoff.com 
tcpServerAdr.ipadr[1] := 122; 
tcpServerAdr.ipadr[2] := 247;
tcpServerAdr.ipadr[3] := 54;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{fa074e28-226e-44c7-8e5a-23ce418fdf3d}">
      <Declaration><![CDATA[METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ipTcp <> 0 AND nSocketId <> 0) THEN //reregister THIS^ for online changes  
	ipTcp.AllocSocket(THIS^, nSocketId);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReceiveData" Id="{79c6df4e-7dd8-4d84-b99e-e084aba0e636}">
      <Declaration><![CDATA[{attribute 'object_name' := 'ReceiveData'}
{attribute 'c++_compatible'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
{attribute 'checksuperglobal'}
METHOD ReceiveData : HRESULT
VAR_INPUT
	socketId	: UDINT;
	nData	: UDINT;
	pData	: PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nReceivedPakets := nReceivedPakets+1;
nLastReturnedMessageLength := nData; //nonstripped
MEMCPY( ADR(sLastReturnedMessage), pData, MIN(nData, SIZEOF(sLastReturnedMessage)-1) ); //stripped to max length of string
memset(ADR(sLastReturnedMessage)+MIN(nData, SIZEOF(sLastReturnedMessage)-1)+1, 0, 1); //add a 00 Byte at end of message]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReceiveEvent" Id="{ae32a160-53cd-472f-8c99-0e7be360beee}">
      <Declaration><![CDATA[{attribute 'object_name' := 'ReceiveEvent'}
{attribute 'c++_compatible'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
{attribute 'checksuperglobal'}
METHOD ReceiveEvent : HRESULT
VAR_INPUT
	socketId	: UDINT;
	tcpEvent	: TCPIP_EVENT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[lastTcpEvent := tcpEvent;

CASE tcpEvent OF
	TCPIP_EVENT_ERROR:
		IF socketId > 0 THEN
        	ipTcp.FreeSocket(nSocketId);
		END_IF
		nSocketId := 0; 
	TCPIP_EVENT_RESET:
		ipTcp.FreeSocket(socketId);
		nSocketId := 0; 
	TCPIP_EVENT_TIMEOUT:
		ipTcp.FreeSocket(socketId);
		nSocketId := 0; 
	TCPIP_EVENT_CONN_CLOSED:
		ipTcp.FreeSocket(socketId);
		nSocketId := 0; 
	TCPIP_EVENT_CONN_INCOMING:
	TCPIP_EVENT_KEEP_ALIVE:
	TCPIP_EVENT_CONN_IDLE:
	TCPIP_EVENT_DATA_SENT:
	TCPIP_EVENT_DATA_RECEIVED:
	TCPIP_EVENT_LINKCONNECT:
	TCPIP_EVENT_LINKDISCONNECT:
		ipTcp.FreeSocket(socketId);
		nSocketId := 0; 
END_CASE; 
ReceiveEvent := S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcAddRef" Id="{452bc4ac-0ef7-4a6a-8ac7-28f34cd343dc}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcAddRef'}
{attribute 'c++_compatible'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
{attribute 'checksuperglobal'}
METHOD TcAddRef : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{89407302-c3d6-4e71-b9aa-e45290551086}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcQueryInterface'}
{attribute 'c++_compatible'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
{attribute 'checksuperglobal'}
METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcRelease" Id="{7a53cf2b-e36a-483f-aebf-0d2854da64b5}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcRelease'}
{attribute 'c++_compatible'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
{attribute 'checksuperglobal'}
METHOD TcRelease : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TcpClient">
      <LineId Id="3" Count="18" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TcpClient.FB_exit">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TcpClient.FB_init">
      <LineId Id="3" Count="13" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TcpClient.FB_reinit">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TcpClient.ReceiveData">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TcpClient.ReceiveEvent">
      <LineId Id="3" Count="3" />
      <LineId Id="40" Count="2" />
      <LineId Id="7" Count="19" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TcpClient.TcAddRef">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TcpClient.TcQueryInterface">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TcpClient.TcRelease">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>