///////////////////////////////////////////////////////////////////////////////
// TcpClient.h
#pragma once

#include "TcpClientInterfaces.h"

class CTcpClient 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
	, public ITcIoTcpProtocolRecv
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST_LIB()
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CTcpClient();
	virtual	~CTcpClient();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ITcIoTcpProtocolRecv
	virtual HRESULT TCOMAPI ReceiveData(ULONG socketId, ULONG nData, PVOID pData);
	virtual HRESULT TCOMAPI ReceiveEvent(ULONG socketId, TCPIP_EVENT tcpEvent);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	IPADDR m_TcpServerIpAddress;
	USHORT m_TcpServerPort;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
	ITcIoTcpProtocolPtr m_spTcpProt;
///</AutoGeneratedContent>

	ULONG m_SockId;
	BOOL m_bSendRequest; //set by debugger for sending a http command
	ULONG m_connections; //count number of connection attempts
};
