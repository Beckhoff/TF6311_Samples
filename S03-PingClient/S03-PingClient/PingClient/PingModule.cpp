///////////////////////////////////////////////////////////////////////////////
// PingModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "PingModule.h"
#include "PingClientVersion.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CPingModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CPingModule
BEGIN_INTERFACE_MAP(CPingModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_ITcIoArpPingRecv, ITcIoArpPingRecv)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_IPERSIST_LIB(CPingModule, VID_PingClient, CID_PingClientCPingModule)
IMPLEMENT_ITCOMOBJECT(CPingModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CPingModule)
IMPLEMENT_ITCADI(CPingModule)
IMPLEMENT_ITCWATCHSOURCE(CPingModule)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CPingModule 
BEGIN_SETOBJPARA_MAP(CPingModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_PingModuleParameter, m_Parameter)
	SETOBJPARA_VALUE(PID_PingModuleIpAddress, m_IpAddress)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_PingModuleArpProt, m_spArpProt)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CPingModule 
BEGIN_GETOBJPARA_MAP(CPingModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_PingModuleParameter, m_Parameter)
	GETOBJPARA_VALUE(PID_PingModuleIpAddress, m_IpAddress)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_PingModuleArpProt, m_spArpProt)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CPingModule
BEGIN_OBJPARAWATCH_MAP(CPingModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CPingModule
BEGIN_OBJDATAAREA_MAP(CPingModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_PingModuleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_PingModuleOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CPingModule::CPingModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_IpAddress, 0, sizeof(m_IpAddress));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CPingModule::~CPingModule() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CPingModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CPingModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CPingModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	if (SUCCEEDED(hr) && m_spArpProt.HasOID())
	{
		m_Trace.Log(tlInfo, FLEAVEA "Register ArpProt");
		if (SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spArpProt)))
		{
			m_Trace.Log(tlInfo, FLEAVEA "Server: ArpProt listening");
			if (FAILED(hr = m_spArpProt->RegisterReceiver(THIS_CAST(ITcIoArpPingRecv))))
			{
				m_Trace.Log(tlError, FLEAVEA "Server: ArpProt RegisterReceiver failed");
				m_spArpProt = NULL;
			}
		}
	}


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller();

		if (m_spArpProt != NULL)
			m_spArpProt->UnregisterReceiver(THIS_CAST(ITcIoArpPingRecv));
		m_spArpProt = NULL;
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CPingModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	
	RemoveModuleFromCaller(); 

	if (m_spArpProt != NULL)
		m_spArpProt->UnregisterReceiver(THIS_CAST(ITcIoArpPingRecv));

	m_spArpProt = NULL;
	
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CPingModule::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CPingModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	m_spArpProt->CheckReceived();

	if (m_bSendRequest)
	{
		//m_spArpProt->PingRequest(((PULONG)&m_IpAddress)[0]);
		m_spArpProt->ArpRequest(((PULONG)&m_IpAddress)[0]);
		m_PendingArp = true;
		m_PendingPing = true;

		m_bSendRequest = false;
	}

	// TODO: Replace the sample with your cyclic code
	m_counter+=m_Inputs.Value;
	m_Outputs.Value=m_counter;

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CPingModule::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CPingModule::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}


///<AutoGeneratedContent id="ImplementationOf_ITcIoArpPingRecv">
HRESULT CPingModule::ArpReply(ULONG ipAddr, ETHERNET_ADDRESS macAddr, ETYPE_VLAN_HEADER* pVlan)
{
	if (m_PendingArp) {
		m_Trace.Log(tlInfo, FLEAVEA "Received ARP Reply from : %d.%d.%d.%d -> MAC %x:%x:%x:%x:%x:%x \n", ((PBYTE)&ipAddr)[3], ((PBYTE)&ipAddr)[2], ((PBYTE)&ipAddr)[1], ((PBYTE)&ipAddr)[0], ((PBYTE)&macAddr)[0], ((PBYTE)&macAddr)[1], ((PBYTE)&macAddr)[2], ((PBYTE)&macAddr)[3], ((PBYTE)&macAddr)[4], ((PBYTE)&macAddr)[5]);
		m_PendingArp = false;
		return S_OK;
	} 
	m_Trace.Log(tlInfo, FLEAVEA "Ignoring ARP from : %d.%d.%d.%d -> MAC %x:%x:%x:%x:%x:%x \n", ((PBYTE)&ipAddr)[3], ((PBYTE)&ipAddr)[2], ((PBYTE)&ipAddr)[1], ((PBYTE)&ipAddr)[0], ((PBYTE)&macAddr)[0], ((PBYTE)&macAddr)[1], ((PBYTE)&macAddr)[2], ((PBYTE)&macAddr)[3], ((PBYTE)&macAddr)[4], ((PBYTE)&macAddr)[5]);
	return S_FALSE;
}

HRESULT CPingModule::PingReply(ULONG ipAddr, ULONG nData, PVOID pData, ETYPE_VLAN_HEADER* pVlan)
{
	if (m_PendingPing) {
		m_Trace.Log(tlInfo, FLEAVEA "Received Ping Reply from : %d.%d.%d.%d\n", ((PBYTE)&ipAddr)[3], ((PBYTE)&ipAddr)[2], ((PBYTE)&ipAddr)[1], ((PBYTE)&ipAddr)[0]);
		m_PendingPing = false;
		return S_OK;
	}
	m_Trace.Log(tlInfo, FLEAVEA "Ignoring Ping Reply from : %d.%d.%d.%d\n", ((PBYTE)&ipAddr)[3], ((PBYTE)&ipAddr)[2], ((PBYTE)&ipAddr)[1], ((PBYTE)&ipAddr)[0]);
	return S_FALSE;

}
///</AutoGeneratedContent>
